#import "AppController.h"
#import "MASPreferencesWindowController.h"
#import "PreferencesGeneralViewController.h"
#import "PreferencesAdvancedViewController.h"
#import "SCTimeIntervalFormatter.h"
#import <SystemConfiguration/SystemConfiguration.h>

NSString* const kSelfControlErrorDomain = @"SelfControlErrorDomain";

@implementation AppController {
	NSWindowController* getStartedWindowController;
}

@synthesize addingBlock;

- (AppController*) init {
	if(self = [super init]) {

		defaults_ = [NSUserDefaults standardUserDefaults];

		NSDictionary* appDefaults = @{@"BlockDuration": @15,
									  @"BlockStartedDate": [NSDate distantFuture],
									  @"HostBlacklist": @[],
									  @"EvaluateCommonSubdomains": @YES,
									  @"IncludeLinkedDomains": @YES,
									  @"HighlightInvalidHosts": @YES,
									  @"VerifyInternetConnection": @YES,
									  @"TimerWindowFloats": @NO,
									  @"BlockSoundShouldPlay": @NO,
									  @"BlockSound": @5,
									  @"ClearCaches": @YES,
									  @"BlockAsWhitelist": @NO,
									  @"BadgeApplicationIcon": @YES,
									  @"AllowLocalNetworks": @YES,
									  @"MaxBlockLength": @1440,
									  @"BlockLengthInterval": @15,
									  @"WhitelistAlertSuppress": @NO,
									  @"GetStartedShown": @NO};

		[defaults_ registerDefaults:appDefaults];

		self.addingBlock = false;

		// refreshUILock_ is a lock that prevents a race condition by making the refreshUserInterface
		// method alter the blockIsOn variable atomically (will no longer be necessary once we can
		// use properties).
		refreshUILock_ = [[NSLock alloc] init];
	}

	return self;
}

- (NSString*)selfControlHelperToolPath {
	static NSString* path;

	// Cache the path so it doesn't have to be searched for again.
	if(!path) {
		NSBundle* thisBundle = [NSBundle mainBundle];
		path = [thisBundle pathForAuxiliaryExecutable: @"org.eyebeam.SelfControl"];
	}

	return path;
}

- (char*)selfControlHelperToolPathUTF8String {
	static char* path;

	// Cache the converted path so it doesn't have to be converted again
	if(!path) {
		path = malloc(512);
		[[self selfControlHelperToolPath] getCString: path
										   maxLength: 512
											encoding: NSUTF8StringEncoding];
	}

	return path;
}

- (IBAction)updateTimeSliderDisplay:(id)sender {
	NSInteger numMinutes = floor([blockDurationSlider_ integerValue]);  

	// Time-display code cleaned up thanks to the contributions of many users

	NSString* timeString = [self timeSliderDisplayStringFromNumberOfMinutes:numMinutes];

	[blockSliderTimeDisplayLabel_ setStringValue:timeString];
	[submitButton_ setEnabled: (numMinutes > 0) && ([[defaults_ arrayForKey:@"HostBlacklist"] count] > 0)];
}

- (NSString *)timeSliderDisplayStringFromNumberOfMinutes:(NSInteger)numberOfMinutes {
    static NSCalendar* gregorian = nil;
    if (gregorian == nil) {
        gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    }

    NSRange secondsRangePerMinute = [gregorian
                                     rangeOfUnit:NSSecondCalendarUnit
                                     inUnit:NSMinuteCalendarUnit
                                     forDate:[NSDate date]];
    NSUInteger numberOfSecondsPerMinute = NSMaxRange(secondsRangePerMinute);

    NSTimeInterval numberOfSecondsSelected = (NSTimeInterval)(numberOfSecondsPerMinute * numberOfMinutes);

    NSString* displayString = [self timeSliderDisplayStringFromTimeInterval:numberOfSecondsSelected];
    return displayString;
}

- (NSString *)timeSliderDisplayStringFromTimeInterval:(NSTimeInterval)numberOfSeconds {
    static SCTimeIntervalFormatter* formatter = nil;
    if (formatter == nil) {
        formatter = [[SCTimeIntervalFormatter alloc] init];
    }

    NSString* formatted = [formatter stringForObjectValue:@(numberOfSeconds)];
    return formatted;
}

- (IBAction)addBlock:(id)sender {
	[defaults_ synchronize];
	if(([[defaults_ objectForKey:@"BlockStartedDate"] timeIntervalSinceNow] < 0)) {
		// This method shouldn't be getting called, a block is on (block started date
		// is in the past, not distantFuture) so the Start button should be disabled.
		NSError* err = [NSError errorWithDomain:kSelfControlErrorDomain
										   code: -102
									   userInfo: @{NSLocalizedDescriptionKey: @"We can't start a block, because one is currently ongoing."}];
		[NSApp presentError: err];
		return;
	}
	if([[defaults_ arrayForKey:@"HostBlacklist"] count] == 0) {
		// Since the Start button should be disabled when the blacklist has no entries,
		// this should definitely not be happening.  Exit.

		NSError* err = [NSError errorWithDomain:kSelfControlErrorDomain
										   code: -102
									   userInfo: @{NSLocalizedDescriptionKey: @"Error -102: Attempting to add block, but no blocklist is set."}];

		[NSApp presentError: err];

		return;
	}

	if([defaults_ boolForKey: @"VerifyInternetConnection"] && ![self networkConnectionIsAvailable]) {
		NSAlert* networkUnavailableAlert = [[NSAlert alloc] init];
		[networkUnavailableAlert setMessageText: NSLocalizedString(@"No network connection detected", "No network connection detected message")];
		[networkUnavailableAlert setInformativeText:NSLocalizedString(@"A block cannot be started without a working network connection.  You can override this setting in Preferences.", @"Message when network connection is unavailable")];
		[networkUnavailableAlert addButtonWithTitle: NSLocalizedString(@"Cancel", "Cancel button")];
		[networkUnavailableAlert addButtonWithTitle: NSLocalizedString(@"Network Diagnostics...", @"Network Diagnostics button")];
		if([networkUnavailableAlert runModal] == NSAlertFirstButtonReturn)
			return;

		// If the user selected Network Diagnostics launch an assisant to help them.
		// apple.com is an arbitrary host chosen to pass to Network Diagnostics.
		CFURLRef url = CFURLCreateWithString(NULL, CFSTR("http://apple.com"), NULL);
		CFNetDiagnosticRef diagRef = CFNetDiagnosticCreateWithURL(NULL, url);
		CFNetDiagnosticDiagnoseProblemInteractively(diagRef);
		return;
	}

	[timerWindowController_ resetStrikes];

	[NSThread detachNewThreadSelector: @selector(installBlock) toTarget: self withObject: nil];
}

- (void)refreshUserInterface {
	if(![refreshUILock_ tryLock]) {
		// already refreshing the UI, no need to wait and do it again
		return;
	}

	BOOL blockWasOn = blockIsOn;
	blockIsOn = [self selfControlLaunchDaemonIsLoaded];

	if(blockIsOn) { // block is on
		if(!blockWasOn) { // if we just switched states to on...
			[self closeTimerWindow];
			[self showTimerWindow];
			[initialWindow_ close];
			[self closeDomainList];
		}
	} 
    
    @end
    
